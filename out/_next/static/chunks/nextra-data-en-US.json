{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/docker/container":{"title":"Container Docker","data":{"":"Pada halaman ini, akan membahas mengenai perintah - perintah lanjutan mengenai Container pada Docker seperti membuat, menjalankan, memberhentikan dan menghapus container pada docker. Selain itu akan membahas beberapa pengaturan lanjutan seperti membuka PORT pada container.","membuat-container#Membuat Container":"Untuk membuat container pada docker, kita bisa menggunakan perintah docker run. Berikut adalah contoh perintah untuk membuat container pada docker:\n> docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\nReferensi: https://docs.docker.com/engine/reference/commandline/run/Berikut adalah contoh langkah-langkah untuk membuat container pada docker:\n> docker run -it --name my-ubuntu ubuntu:latest\nSetelah itu akan muncul prompt baru yang menunjukkan bahwa kita sudah masuk ke dalam container dengan nama my-ubuntu.\nroot@<container_id>:/#","melihat-daftar-container#Melihat Daftar Container":"Untuk melihat daftar container yang sedang berjalan pada docker, kita bisa menggunakan perintah docker ps.\nBerikut adalah contoh perintah untuk melihat daftar container yang sedang berjalan pada docker:\n> docker ps [OPTIONS]\nReferensi: https://docs.docker.com/engine/reference/commandline/ps/Berikut adalah contoh langkah-langkah untuk melihat daftar container yang sedang berjalan pada docker:\n> docker ps\nCONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES\nfba6dd330e8f   ubuntu    \"/bin/bash\"   2 minutes ago   Up 2 minutes             my-ubuntu\n89f8b2cb2e2d   fedora    \"/bin/bash\"   5 minutes ago   Up 5 minutes             server-fedora","menjalankan-container-yang-berhenti#Menjalankan Container yang Berhenti":"Untuk menjalankan container yang berhenti, kita bisa menggunakan perintah docker start.\nBerikut adalah contoh perintah untuk menjalankan container yang berhenti:\nCara melihat container yang berhenti adalah dengan menggunakan perintah docker ps -a.\nJika container berhenti, maka statusnya akan menjadi Exited.\n> docker start [OPTIONS] CONTAINER\nReferensi: https://docs.docker.com/engine/reference/commandline/start/Berikut adalah contoh langkah-langkah untuk menjalankan container yang berhenti:\n> docker start my-ubuntu\nSetelah itu, container my-ubuntu akan berjalan kembali dapat dilihat dengan perintah docker ps.\n> docker ps\nCONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                       PORTS       NAMES\nfba6dd330e8f   ubuntu    \"/bin/bash\"   2 minutes ago   Up 2 minutes                             my-ubuntu\n89f8b2cb2e2d   fedora    \"/bin/bash\"   5 minutes ago   Exited (2) 31 hours ago                  server-fedora","memberhentikan-container#Memberhentikan Container":"Untuk memberhentikan container yang sedang berjalan, kita bisa menggunakan perintah docker stop.\nBerikut adalah contoh perintah untuk memberhentikan container yang sedang berjalan:\n> docker stop [OPTIONS] CONTAINER\nReferensi: https://docs.docker.com/engine/reference/commandline/stop/Berikut adalah contoh langkah-langkah untuk memberhentikan container yang sedang berjalan:\n> docker stop my-ubuntu\nCONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                       PORTS       NAMES\nfba6dd330e8f   ubuntu    \"/bin/bash\"   2 minutes ago   Exited (2) 2 Seconds ago                 my-ubuntu\n89f8b2cb2e2d   fedora    \"/bin/bash\"   5 minutes ago   Exited (2) 31 hours ago                  server-fedora","menghapus-container#Menghapus Container":"Untuk menghapus container yang berhenti, kita bisa menggunakan perintah docker rm.\nBerikut adalah contoh perintah untuk menghapus container yang berhenti:\n> docker rm [OPTIONS] CONTAINER\nJika container sedang berjalan, maka kita harus memberhentikan container tersebut terlebih dahulu sebelum menghapusnya.\nReferensi: https://docs.docker.com/engine/reference/commandline/rm/Berikut adalah contoh langkah-langkah untuk menghapus container yang berhenti:\n> docker rm my-ubuntu\nCONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                       PORTS       NAMES\n89f8b2cb2e2d   fedora    \"/bin/bash\"   5 minutes ago   Exited (2) 31 hours ago                  server-fedora","membuka-port-pada-container#Membuka PORT pada Container":"PORT adalah sebuah mekanisme yang digunakan untuk menghubungkan container dengan local machine atau container lainnya.Untuk membuka PORT pada container, kita bisa menggunakan perintah docker run -p.\nBerikut adalah contoh perintah untuk membuka PORT pada container:\n> docker run -p [HOST_PORT]:[CONTAINER_PORT] IMAGE\nReferensi: https://docs.docker.com/engine/reference/commandline/run/Berikut adalah contoh langkah-langkah untuk membuka PORT pada container:\n> docker run -p 8080:80 nginx\nSetelah itu, PORT 80 pada container akan di-mapping ke PORT 8080 pada local machine."}},"/docker/dasar":{"title":"Dasar - Dasar Docker","data":{"":"Pada halaman ini, kita akan membahas dasar-dasar Docker, termasuk perbedaan antara image dan container, cara melakukan pull image dari Docker Hub, dan cara membuat dan menjalankan container Docker.","perbedaan-image-dan-container#Perbedaan Image dan Container":"Dalam Docker, terdapat dua konsep utama yang sering digunakan, yaitu image dan container. Kedua konsep ini memiliki perbedaan yang mendasar, yaitu:\nImage: Image adalah template yang berisi semua dependensi dan library yang diperlukan untuk menjalankan aplikasi. Image bersifat read-only, sehingga tidak dapat diubah setelah image dibuat. Image digunakan untuk membuat kontainer Docker.\nContainer: Kontainer adalah instance dari image yang berjalan di lingkungan terisolasi. Kontainer Docker bersifat read-write, sehingga pengguna dapat melakukan perubahan di dalam kontainer. Kontainer Docker dapat dijalankan, dihentikan, dihapus, dan dihentikan kembali.","pull-image-dari-docker-hub#Pull Image dari Docker Hub":"Docker Hub adalah cloud-based registry yang menyediakan berbagai image Docker yang dapat digunakan oleh pengguna. Pengguna dapat mencari image Docker yang dibutuhkan di Docker Hub dan melakukan pull image tersebut ke local machine.Pull image dari Docker Hub artinya mengunduh image Docker dari Docker Hub ke local machine.\ndocker pull [OPTIONS] NAME:[TAG]\nNAME adalah nama image yang berada pada Docker Hub\nTAG adalah versi dari image tersebut Note: Jika tidak ada tag, maka Docker akan mengunduh versi terbaru dari image tersebut (latest).\nReferensi: https://docs.docker.com/engine/reference/commandline/pull/Berikut adalah langkah-langkah untuk melakukan pull image dari Docker Hub:\nBuka terminal atau command prompt.\nJalankan perintah berikut untuk melakukan pull image ubuntu dari Docker Hub:\n> docker pull ubuntu:latest\natau jika ingin mengunduh versi tertentu dari image ubuntu, misalnya versi 20.10:\n> docker pull ubuntu:20.10\nTunggu hingga proses pull image selesai.\nSetelah proses selesai, image ubuntu akan tersedia di local machine.\nUntuk melihat daftar image yang telah diunduh, jalankan perintah berikut:\n> docker images\nREPOSITORY                       TAG       IMAGE ID       CREATED        SIZE\nfedora                           latest    eca85b75dc19   11 days ago    222MB\nalpine                           3.20.3    91ef0af61f39   2 weeks ago    7.8MB\nalpine                           latest    91ef0af61f39   2 weeks ago    7.8MB\nubuntu                           latest    edbfe74c41f8   8 weeks ago    78.1MB","membuat-dan-menjalankan-container-docker#Membuat dan Menjalankan Container Docker":"Setelah image berhasil diunduh, selanjutnya kita akan membuat dan menjalankan container Docker dari image yang telah diunduh.perintah untuk membuat dan menjalankan container Docker adalah sebagai berikut:\n> docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\nReferensi: https://docs.docker.com/engine/reference/commandline/run/Berikut adalah langkah-langkah untuk membuat dan menjalankan container Docker:\nBuka terminal atau command prompt.\nJalankan perintah berikut untuk membuat container dari image ubuntu:\n> docker run -it --name my-ubuntu ubuntu:latest\nSetelah itu akan muncul prompt baru yang menunjukkan bahwa kita sudah masuk ke dalam container dengan nama my-ubuntu.\nroot@<container-id>:/#\nSelamat, Anda sudah berhasil membuat dan menjalankan container Docker!\nUntuk keluar dari container, Anda dapat menekan tombol Ctrl + D atau menjalankan perintah exit.\nPada saat ini kita sudah berhasil membuat dan menjalankan container Docker dari image ubuntu. Selanjutnya, kita dapat melakukan berbagai operasi di dalam container tersebut, seperti menginstall aplikasi, mengubah konfigurasi, dan lain sebagainya."}},"/docker/images":{"title":"Images Docker","data":{"":"Pada halaman ini, kita akan membahas mengenai image Docker, termasuk cara melakukan pull image dari Docker Hub dan cara melihat daftar image yang telah diunduh. Selain itu akan dibahas mengenai cara membuat image Docker sendiri.","pull-image-dari-docker-hub#Pull Image dari Docker Hub":"Docker Hub adalah cloud-based registry yang menyediakan berbagai image Docker yang dapat digunakan oleh pengguna. Pengguna dapat mencari image Docker yang dibutuhkan di Docker Hub dan melakukan pull image tersebut ke local machine.Pull image dari Docker Hub artinya mengunduh image Docker dari Docker Hub ke local machine.\n> docker pull [OPTIONS] NAME:[TAG]\nNAME adalah nama image yang berada pada Docker Hub\nTAG adalah versi dari image tersebut Note: Jika tidak ada tag, maka Docker akan mengunduh versi terbaru dari image tersebut (latest).\nReferensi: https://docs.docker.com/engine/reference/commandline/pull/Berikut adalah langkah-langkah untuk melakukan pull image dari Docker Hub:\nJalankan perintah berikut untuk melakukan pull image ubuntu dari Docker Hub:\n> docker pull ubuntu:latest\natau jika ingin mengunduh versi tertentu dari image ubuntu, misalnya versi 20.10:\n> docker pull ubuntu:20.10\nTunggu hingga proses pull image selesai.\nSetelah proses selesai, anda akan melihat image melalui perintah docker images.\n> docker images\nREPOSITORY                       TAG       IMAGE ID       CREATED        SIZE\nfedora                           latest    eca85b75dc19   11 days ago    222MB\nalpine                           3.20.3    91ef0af61f39   2 weeks ago    7.8MB\nalpine                           latest    91ef0af61f39   2 weeks ago    7.8MB\nubuntu                           latest    edbfe74c41f8   8 weeks ago    78.1MB","menghapus-image-docker#Menghapus Image Docker":"Untuk menghapus image Docker yang tidak digunakan, kita bisa menggunakan perintah docker rmi.\nBerikut adalah contoh perintah untuk menghapus image Docker:\n> docker rmi [OPTIONS] IMAGE [IMAGE...]\nIMAGE adalah nama image yang ingin dihapus.\nReferensi: https://docs.docker.com/engine/reference/commandline/rmi/Berikut adalah langkah-langkah untuk menghapus image Docker:\nJalankan perintah berikut untuk menghapus image ubuntu:\n> docker rmi ubuntu\nTunggu hingga proses selesai.\nSetelah proses selesai, image ubuntu akan terhapus dari local machine.","membuat-image-docker-sendiri-menggunakan-dockerfile#Membuat Image Docker Sendiri Menggunakan Dockerfile":"Selain menggunakan image Docker yang telah tersedia di Docker Hub, kita juga bisa membuat image Docker sendiri.\nUntuk membuat image Docker sendiri, kita bisa menggunakan Dockerfile.Dockerfile adalah sebuah file teks yang berisi instruksi untuk membangun image Docker. Dockerfile berisi langkah-langkah yang diperlukan untuk membuat image Docker, seperti menentukan base image, menyalin file, mengeksekusi perintah, dan lain sebagainya.Berikut adalah contoh Dockerfile sederhana untuk membuat image yang berisi web server Nginx:\n# Menggunakan base image nginx\nFROM ubuntu:latest\n# Install Nginx\nRUN apt-get update && apt-get install -y nginx\n# BUka port 80\nEXPOSE 80\n# Perintah yang akan dijalankan ketika container dijalankan\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\nPerintah untuk membuat image Docker dari Dockerfile adalah sebagai berikut:\n> docker image build [OPTIONS] PATH\nPATH adalah lokasi Dockerfile yang akan digunakan untuk membangun image.\nReferensi: https://docs.docker.com/engine/reference/builder/Berikut adalah langkah-langkah untuk membuat image Docker sendiri:\nBuat Dockerfile dengan isi seperti contoh di atas.\nSimpan Dockerfile tersebut di dalam sebuah direktori.\nBuka terminal atau command prompt.\nPindah ke direktori tempat Dockerfile disimpan.\nJalankan perintah berikut untuk membangun image dari Dockerfile:\n> docker build -t my-nginx .\nTunggu hingga proses selesai.\nSetelah proses selesai, image my-nginx akan tersedia di local machine.\n> docker images\nREPOSITORY                       TAG       IMAGE ID       CREATED        SIZE\nmy-nginx                         latest    7a2b3b1b0cde   2 minutes ago  78.1MB\nfedora                           latest    eca85b75dc19   11 days ago    222MB\nalpine                           3.20.3    91ef0af61f39   2 weeks ago    7.8MB\nalpine                           latest    91ef0af61f39   2 weeks ago    7.8MB\nubuntu                           latest    edbfe74c41f8   8 weeks ago    78.1MB\nDengan demikian, kita telah berhasil membuat image Docker sendiri menggunakan Dockerfile.","membuat-image-docker-dari-container-yang-telah-dijalankan#Membuat Image Docker dari Container yang Telah Dijalankan":"Selain menggunakan Dockerfile, kita juga bisa membuat image Docker dari container yang telah dijalankan.\nUntuk membuat image Docker dari container yang telah dijalankan, kita bisa menggunakan perintah docker commit.Perintah untuk membuat image Docker dari container yang telah dijalankan adalah sebagai berikut:\n> docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\nCONTAINER adalah ID atau nama container yang ingin diubah menjadi image.\nREPOSITORY adalah nama image baru yang akan dibuat.\nTAG adalah versi dari image tersebut. Jika tidak ada tag, maka Docker akan memberikan tag latest.\nReferensi: https://docs.docker.com/engine/reference/commandline/commit/Berikut adalah langkah-langkah untuk membuat image Docker dari container yang telah dijalankan:\nAsumsi kita memiliki container dengan nama my-nginx yang telah dijalankan.\nJalankan container yang ingin diubah menjadi image.\nBuka terminal atau command prompt.\nJalankan perintah berikut untuk membuat image dari container tersebut:\n> docker commit my-nginx my-nginx-image\nTunggu hingga proses selesai.\nSetelah proses selesai, image my-nginx-image akan tersedia di local machine.\n> docker images\nREPOSITORY                       TAG       IMAGE ID       CREATED        SIZE\nmy-nginx-image                   latest    7a2b3b1b0cde   2 minutes ago  78.1MB\nfedora                           latest    eca85b75dc19   11 days ago    222MB\nalpine                           3.20.3    91ef0af61f39   2 weeks ago    7.8MB\nalpine                           latest    91ef0af61f39   2 weeks ago    7.8MB\nubuntu                           latest    edbfe74c41f8   8 weeks ago    78.1MB\nDengan demikian, kita telah berhasil membuat image Docker dari container yang telah dijalankan."}},"/docker":{"title":"Docker","data":{"":"Docker adalah platform open-source yang digunakan untuk membangun, menguji, dan menyebarkan aplikasi dengan cepat dan efisien. Docker menggunakan konsep kontainer, di mana aplikasi dibungkus bersama dengan semua dependensi dan semua library menjadi satu unit yang dapat dijalankan di berbagai lingkungan.","cara-kerja-docker#Cara Kerja Docker":"Docker menggunakan teknologi kontainerisasi untuk memungkinkan pengguna menjalankan aplikasi di lingkungan yang terisolasi. Docker menggunakan image untuk membuat kontainer, di mana image adalah template yang berisi semua dependensi dan library yang diperlukan untuk menjalankan aplikasi. Setiap kontainer Docker berjalan di atas image yang sama, sehingga memastikan bahwa aplikasi berjalan dengan konsisten di berbagai lingkungan.","kelebihan-docker#Kelebihan Docker":"Portabilitas: Container Docker dapat dijalankan di berbagai lingkungan.\nEfisiensi: Container Docker memungkinkan pengguna untuk menjalankan aplikasi dengan cepat dan efisien.\nKonsistensi: Container Docker memastikan bahwa aplikasi berjalan dengan konsisten di berbagai lingkungan.\nIsolasi: Container Docker memastikan bahwa aplikasi berjalan terisolasi dari lingkungan host.","docker-hub#Docker Hub":"Docker Hub adalah cloud-based registry yang menyediakan berbagai image Docker yang dapat digunakan oleh pengguna. Docker Hub menyediakan image Docker yang telah dibuat oleh pengguna lain, sehingga pengguna dapat dengan mudah menggunakan image tersebut tanpa perlu membuat image dari awal."}},"/docker/instalasi":{"title":"Instalasi Docker","data":{"":"Berikut adalah langkah-langkah instalasi Docker di berbagai sistem operasi.","windows#Windows":"Pastikan sebelum melakukan instalasi sudah memiliki akun DockerHub terlebih dahuluJika belum silahkan membuat akun disini: https://hub.docker.com/\nBuka halaman unduh Docker Desktop menggunakan browser.\nDownload installer Docker dengan nama Docker Desktop for Windows - x86_64.\nBuka file yang telah diunduh.\nIkuti langkah-langkah instalasi yang ditampilkan oleh installer Docker.\nSetelah instalasi selesai, buka Docker Desktop dari Start Menu.\nReferensi: https://docs.docker.com/desktop/install/windows-install/","macos#MacOS":"Referensi: https://docs.docker.com/desktop/install/mac-install/","linux#Linux":"Referensi: https://docs.docker.com/desktop/install/linux-install/"}},"/docker/referensi":{"title":"Glosariun Docker","data":{}},"/docker/utility":{"title":"Perintah Utility Docker","data":{"":"Pada halaman ini, akan membahas mengenai perintah-perintah yang sering digunakan pada Docker. Perintah-perintah ini sangat berguna untuk melakukan berbagai operasi pada Docker seperti melakukan copy file dari dan ke container, melihat log container, dan lain sebagainya.","copy-file-dari-dan-ke-container#Copy File dari dan ke Container":"Untuk melakukan copy file dari dan ke container, kita bisa menggunakan perintah docker cp. Berikut adalah contoh perintah untuk melakukan copy file dari dan ke container:\n> docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH\natau melakukan copy file dari container ke host:\n> docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH\nReferensi: https://docs.docker.com/engine/reference/commandline/cp/Berikut adalah contoh langkah-langkah untuk melakukan copy file dari dan ke container:\nCopy file dari host ke container:\n> docker cp file.txt my-ubuntu:/path/to/destination\nCopy file dari container ke host:\n> docker cp my-ubuntu:/path/to/file.txt /path/to/destination","melihat-log-container#Melihat Log Container":"Untuk melihat log container, kita bisa menggunakan perintah docker logs. Berikut adalah contoh perintah untuk melihat log container:\n> docker logs [OPTIONS] CONTAINER\nCONTAINER adalah ID atau nama container yang ingin dilihat log-nya.\nReferensi: https://docs.docker.com/engine/reference/commandline/logs/","melihat-statistik-container#Melihat Statistik Container":"Untuk melihat statistik container, kita bisa menggunakan perintah docker stats.\n> docker stats [OPTIONS] [CONTAINER...]\nReferensi: https://docs.docker.com/engine/reference/commandline/stats/"}},"/":{"title":"Selamat datang di Tutor-Rin","data":{"":"Selamat Datang di Tutor-Rin!Tutor-Rin adalah platform belajar yang fokus pada pengajaran programming. Kami menyediakan tutorial praktis dan mudah dipahami, dirancang untuk membantu Anda, baik sebagai pemula maupun pengembang berpengalaman, menguasai berbagai bahasa pemrograman.Mari mulai perjalanan belajar Anda bersama Tutor-Rin dan kembangkan keterampilan coding Anda hari ini!"}}}